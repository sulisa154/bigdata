# -*- coding: utf-8 -*-
"""지진데이터분석.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KdHPiXQqlcqyXsEsPWVYe6NRhWtIQchy
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from google.colab import drive

drive.mount('/content/drive')

# 첫 번째 데이터셋
file_path_1 = '/content/drive/MyDrive/file/IEB_export-1.csv'
df1 = pd.read_csv(file_path_1, encoding='ISO-8859-1')

# 두 번째 데이터셋
file_path_2 = '/content/drive/MyDrive/file/IEB_export-2.csv'
df2 = pd.read_csv(file_path_2, encoding='ISO-8859-1')

# 결측치 처리: Depth 열에서 결측치를 삭제
df1 = df1.dropna(subset=['Depth'])
df2 = df2.dropna(subset=['Depth'])

# Depth 값이 0인 데이터 삭제
df1 = df1[df1['Depth'] > 0]
df2 = df2[df2['Depth'] > 0]

# 3개의 데이터셋을 하나로 결합 (기본적으로 수직 결합)
df = pd.concat([df1, df2], ignore_index=True)

# "Japan"이 포함된 지역만 필터링
df_japan = df[df['Region'].str.contains('Japan')]

# 연도 컬럼 추가 (Year, Month, Day에서 Date를 생성)
df_japan['Date'] = pd.to_datetime(df_japan[['Year', 'Month', 'Day']])
df_japan['Year'] = df_japan['Date'].dt.year

# 지역 구분 함수 정의
def get_region(lat, lon):
    if lat >= 45.0:  # 훗카이도
        return 'Hokkaido'
    elif 39.0 <= lat < 45.0 and lon <= 140.0:  # 도호쿠
        return 'Tohoku'
    elif 35.0 <= lat < 39.0 and lon <= 140.0:  # 간토
        return 'Kanto'
    elif 35.0 <= lat < 37.0 and lon >= 137.0:  # 중부
        return 'Chubu'
    elif 34.0 <= lat < 35.0 and lon >= 135.0:  # 간사이
        return 'Kansai'
    elif 33.0 <= lat < 34.0 and lon < 133.0:  # 주고쿠
        return 'Chugoku'
    elif 32.0 <= lat < 33.0 and lon < 134.0:  # 시코쿠
        return 'Shikoku'
    else:  # 규슈/오키나와
        return 'Kyushu/Okinawa'

# 지역 정보를 추가 (SettingWithCopyWarning 해결)
df_japan.loc[:, 'Region_Name'] = df_japan.apply(lambda row: get_region(row['Lat'], row['Lon']), axis=1)

# 데이터 확인
print(df_japan.head())

# 연도별 지역별 평균 깊이 계산
region_depth_year = df_japan.groupby(['Year', 'Region_Name'])['Depth'].mean().unstack().fillna(0)

# 시각화: 지역별 연도별 지진 깊이 평균
plt.figure(figsize=(14, 8))
region_depth_year.plot(kind='line', marker='o', figsize=(14, 8))
plt.title('Average Earthquake Depth by Region and Year (Japan)')
plt.xlabel('Year')
plt.ylabel('Average Depth (km)')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# 연도별 평균 Depth 값 계산
depth_year = df_japan.groupby('Year')['Depth'].mean()

# 연도별 평균 Depth 시각화
plt.figure(figsize=(14, 8))
depth_year.plot(kind='line', marker='o', color='purple')
plt.title('Average Earthquake Depth by Year in Japan')
plt.xlabel('Year')
plt.ylabel('Average Depth (km)')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# 지역 예측을 위한 데이터 전처리 (랜덤 포레스트 회귀 사용 예시)
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error

# 지역을 숫자로 변환
df_japan['Region_Code'] = pd.factorize(df_japan['Region_Name'])[0]  # 지역을 숫자로 변환
X = df_japan[['Year', 'Lat', 'Lon', 'Region_Code']]  # 독립 변수
y = df_japan['Depth']  # 종속 변수

# 학습 데이터와 테스트 데이터로 분할
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# 랜덤 포레스트 회귀 모델 학습
rf_model = RandomForestRegressor(n_estimators=100, random_state=42)
rf_model.fit(X_train, y_train)

# 예측
y_pred = rf_model.predict(X_test)

# 예측 정확도 평가
mae = mean_absolute_error(y_test, y_pred)
print(f'Mean Absolute Error: {mae}')

# 시각화: 실제 값 vs 예측 값
plt.figure(figsize=(10, 6))
plt.scatter(y_test, y_pred, alpha=0.6)
plt.plot([y.min(), y.max()], [y.min(), y.max()], 'k--', lw=2)
plt.xlabel('Actual Depth')
plt.ylabel('Predicted Depth')
plt.title('Actual vs Predicted Earthquake Depth (Random Forest) for Japan')
plt.tight_layout()
plt.show()

mae = mean_absolute_error(y_test, y_pred)
print(f'Mean Absolute Error: {mae}')

import matplotlib.pyplot as plt
import seaborn as sns

# 지진 발생 위치와 깊이 관계 분석
plt.figure(figsize=(10, 6))
plt.scatter(df['Lon'], df['Lat'], c=df['Depth'], cmap='viridis', s=50, edgecolor='k')
plt.colorbar(label='Depth (km)')
plt.title('Earthquake Depth by Location')
plt.xlabel('Longitude')
plt.ylabel('Latitude')
plt.tight_layout()
plt.show()

plt.figure(figsize=(10, 6))
plt.scatter(df['Depth'], df['Mag'], c=df['Mag'], cmap='coolwarm', s=100, edgecolor='k')
plt.colorbar(label='Magnitude')
plt.title('Relationship between Earthquake Depth and Magnitude')
plt.xlabel('Depth (km)')
plt.ylabel('Magnitude')
plt.tight_layout()
plt.show()